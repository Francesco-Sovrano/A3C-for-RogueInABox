Questo progetto è nato originariamente come un fork di https://github.com/miyosuda/unreal e di https://github.com/rogueinabox/rogueinabox.
Il progetto è stato testato su Debian 9 (probabilmente anche su altri OS, specie quelli Unix). Lo script setup.sh installa le dipendenze necessarie e compila Rogue (http://www.anthive.com/project/rogue/). Prima di eseguire setup.sh occorre aver installato virtualenv, python3-dev, python3-pip e make. Lo script train.sh fa partire il training. Lo script test.sh fa partire il testing.
Sia in fase di testing che in fase di training l'agente produce statistiche in tempo reale sull'esecuzione dell'agente. Tra le statistiche riportate nell'esperimento ci sono: accuracy, recall, precision, F1 score, il coefficiente di correlazione di Matthews, ecc.. Per ogni thread vengono stampate le statistiche come media delle ultime 200 simulazioni. Nel file results.log è presente la media delle medie di ogni thread.
Attraverso il file options.py è possibile cambiare il grosso dei parametri dell'architettura, tra cui: numero di thread, uso o meno della GPU, learning rate iniziale, cartelle di destinazione dei log e molto altro. Se si vuole, è possibile far stampare all'agente maggiori informazioni su ogni episodio. Di default vengono stampati dettagli solo degli episodi in cui l'agente ha performato meglio.
Inoltre il framework è composto dalle seguenti classi:
- Application (train.py): l'agente globale A3C, contiente i metodi per avviare gli agenti locali.
- Trainer (trainer.py): un agente locale di A3C, può fare training o testing.
- RMSPropApplier (rmsprop_applier.py): la classe per il calcolo asincrono del gradiente.
- MultiAgentModel e A3CModel (multi_agent_model.py e a3c_model.py): all'interno di queste classi è specificata la struttura della rete neurale (LSTM, policy layer, value layer, CNN, FC, ecc..).
- Environment (environment.py): classe che gestisce l'interfaccia tra l'agente e l'ambiente. Per l'esempio di applicazione si è esteso Environment con RogueEnvironment (rogue_environment.py). RogueEnvironment contiene i metodi per calcolare le reward, ottenere stati e statistiche sugli episodi, ecc..